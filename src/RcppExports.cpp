// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// parse_curl
DataFrame parse_curl(CharacterVector urls);
RcppExport SEXP _curlparse_parse_curl(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_curl(urls));
    return rcpp_result_gen;
END_RCPP
}
// url_parse
DataFrame url_parse(CharacterVector urls);
RcppExport SEXP _curlparse_url_parse(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(url_parse(urls));
    return rcpp_result_gen;
END_RCPP
}
// scheme
CharacterVector scheme(CharacterVector urls);
RcppExport SEXP _curlparse_scheme(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(scheme(urls));
    return rcpp_result_gen;
END_RCPP
}
// user
CharacterVector user(CharacterVector urls);
RcppExport SEXP _curlparse_user(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(user(urls));
    return rcpp_result_gen;
END_RCPP
}
// password
CharacterVector password(CharacterVector urls);
RcppExport SEXP _curlparse_password(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(password(urls));
    return rcpp_result_gen;
END_RCPP
}
// host
CharacterVector host(CharacterVector urls);
RcppExport SEXP _curlparse_host(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(host(urls));
    return rcpp_result_gen;
END_RCPP
}
// port
CharacterVector port(CharacterVector urls);
RcppExport SEXP _curlparse_port(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(port(urls));
    return rcpp_result_gen;
END_RCPP
}
// path
CharacterVector path(CharacterVector urls);
RcppExport SEXP _curlparse_path(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(path(urls));
    return rcpp_result_gen;
END_RCPP
}
// url_options
CharacterVector url_options(CharacterVector urls);
RcppExport SEXP _curlparse_url_options(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(url_options(urls));
    return rcpp_result_gen;
END_RCPP
}
// query
CharacterVector query(CharacterVector urls);
RcppExport SEXP _curlparse_query(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(query(urls));
    return rcpp_result_gen;
END_RCPP
}
// fragment
CharacterVector fragment(CharacterVector urls);
RcppExport SEXP _curlparse_fragment(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(fragment(urls));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_curlparse_parse_curl", (DL_FUNC) &_curlparse_parse_curl, 1},
    {"_curlparse_url_parse", (DL_FUNC) &_curlparse_url_parse, 1},
    {"_curlparse_scheme", (DL_FUNC) &_curlparse_scheme, 1},
    {"_curlparse_user", (DL_FUNC) &_curlparse_user, 1},
    {"_curlparse_password", (DL_FUNC) &_curlparse_password, 1},
    {"_curlparse_host", (DL_FUNC) &_curlparse_host, 1},
    {"_curlparse_port", (DL_FUNC) &_curlparse_port, 1},
    {"_curlparse_path", (DL_FUNC) &_curlparse_path, 1},
    {"_curlparse_url_options", (DL_FUNC) &_curlparse_url_options, 1},
    {"_curlparse_query", (DL_FUNC) &_curlparse_query, 1},
    {"_curlparse_fragment", (DL_FUNC) &_curlparse_fragment, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_curlparse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
